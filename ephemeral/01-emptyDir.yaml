apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat
data:
  filebeat.yml: |
    filebeat:
      config:
        modules:
          path: /usr/share/filebeat/modules.d/*.yml
          reload:
            enabled: true
      modules:
      - module: nginx
        access:
          var.paths: ["/var/log/nginx/access.log*"]
        error:
          var.paths: ["/var/log/nginx/error.log*"]
    output:
      elasticsearch:
        hosts: ["elasticsearch:9200"]
---
kind: Pod
apiVersion: v1
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    volumeMounts:
    - name: nginx-logs
      mountPath: /var/log/nginx/
  - name: filebeat
    image: docker.elastic.co/beats/filebeat:7.5.0
    volumeMounts:
    - name: filebeat-config
      mountPath: /usr/share/filebeat/filebeat.yml
      subPath: filebeat.yml
    - name: nginx-logs
      mountPath: /var/log/nginx/
  volumes:
  - name: nginx-logs
    emptyDir: {}
  - name: filebeat-config
    configMap:
      name: filebeat
      items:
        - key: filebeat.yml
          path: filebeat.yml
#Nginx writes logs to /var/log/nginx/, which are stored in an emptyDir shared volume.
#Filebeat reads those logs and forwards them to Elasticsearch for storage and analysis, using the configuration provided by the ConfigMap. This setup facilitates centralized log collection from the Nginx container in Kubernetes.
# Absolutely, let’s break down the volume mounts in detail. Volume mounts are used to make storage accessible to containers within a Pod. In this setup, we’re using two volumes:

# nginx-logs - A shared volume between the nginx and filebeat containers, used to store Nginx logs.
# filebeat-config - A volume containing the Filebeat configuration file, loaded from a ConfigMap.
# Here’s how each volume works in this setup:

# Volume 1: nginx-logs
# This volume is of type emptyDir, which means it’s a temporary storage that exists only as long as the Pod is running. When the Pod is deleted, any data in the emptyDir is deleted as well.

# Purpose: This volume is used to share Nginx log files between the nginx and filebeat containers.
# How It Works:
# The nginx container writes its log files (access logs and error logs) to /var/log/nginx/.
# The nginx-logs volume is mounted to the path /var/log/nginx/ in both containers. This means:
# Any logs created by Nginx in /var/log/nginx/ are saved to the shared nginx-logs volume.
# The filebeat container can also access these log files at the same path (/var/log/nginx/) since they are mounted from the same volume.
# In essence:

# nginx creates logs in /var/log/nginx/.
# filebeat reads logs from /var/log/nginx/.
# This shared volume allows filebeat to access the logs generated by nginx and send them to Elasticsearch.

# Volume 2: filebeat-config
# This volume pulls in a specific configuration file for filebeat from a ConfigMap (named filebeat).

# Purpose: To provide the filebeat container with a custom configuration file (filebeat.yml) without including it directly in the container image.
# How It Works:
# The filebeat container mounts the filebeat-config volume at /usr/share/filebeat/filebeat.yml.
# By specifying subPath: filebeat.yml, we’re ensuring that only the filebeat.yml file from the ConfigMap is mounted to this path.
# In summary:

# filebeat can read the custom configuration located at /usr/share/filebeat/filebeat.yml.
# This configuration allows filebeat to know how to collect the Nginx logs and send them to Elasticsearch.
# Summary of Volume Mounts
# nginx-logs: Provides a shared directory (/var/log/nginx/) for Nginx logs. Both nginx and filebeat have access to this path, enabling filebeat to ship Nginx logs to Elasticsearch.
# filebeat-config: Provides the filebeat.yml configuration file to the filebeat container, allowing it to operate according to the settings defined in the ConfigMap.
# This setup enables log sharing and custom configuration without modifying the base container images.